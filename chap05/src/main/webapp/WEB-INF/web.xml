<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
	id="WebApp_ID" version="4.0">
	<display-name>chap05</display-name>

	<!-- 
		서버를 실행할때 web.xml의 설정을 불러 사용한다 
		이곳의 설정은 서버를 재시작하기 전에는 반영이 되지 않는다. 
		XML(eXtensible Markup Language) : 데이터를 체계적으로 저장하기 위한 문자열 구조 
		XML형식으로 데이터를 저장해놓으면 다른 언어에서도 구조를 해석하여 사용할 수 있다	
	 -->

	<!-- 기존에 있었던 하위 태그들
	<welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
 	</welcome-file-list> 
	 -->
	 
	<!-- # web.xml로 서블릿 매핑하기 (@WebServlet()(에너테이션(Annotation)방법)으로 아래 두가지 과정을 생략할 수 있다) -->
	
	<!-- (1)서블릿 등록하기 -->
	<!-- 브라우저에서 요청하는 매핑 이름에 대해 실젤 실행하는 서블릿 클래스를 설정하는 태그  -->
	<servlet> 
		<!-- web.xml 내에서 사용할 서블릿 이름(변수명 비슷한 것) / 다른 servlet-name 태그값과 같으면 안된다-->
		<servlet-name>helloServlet</servlet-name>
		<!-- 해당 서블릿의 경로 / 정확한 패키지 경로를 줘야한다 -->
		<servlet-class>chap05.servlet.HelloServlet</servlet-class> 
	</servlet>
	
	<!-- jsp-file(webapp 밑 경로 사용) -->
	<servlet>
		<servlet-name>helloJSP</servlet-name>
		<jsp-file>/default.jsp</jsp-file>
	</servlet>
	
	<!-- 
		(2) 등록되어 있는 서블릿과 원하는 URL을 매핑시키기/ 브라우저에서 요청하는 논리적인 서블릿을 설정
		
		* : 모든 것
		/path/* : 해당경로 이후의 모든 것
		*.hello : 확장자가 .hello인 모든 것
		/ : 아무런 매핑에도 걸리지 않은 요청이 가게 되는 곳 (else의 역할)

	 -->
	<servlet-mapping>
		<servlet-name>helloServlet</servlet-name>
		<url-pattern>/welcome/hello</url-pattern>
	</servlet-mapping>
	
		<servlet-mapping>
		<servlet-name>helloJSP</servlet-name>
		<url-pattern>/welcome/hello/jsp</url-pattern> <!-- 실제파일 위치와 상관없은 url/ 설정하는 대로 가는것 /  브라우저에서 요청하는 논리적인 서블릿 이름-->
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>helloJSP</servlet-name>
		<url-pattern>/comic/*</url-pattern>
	</servlet-mapping>
	
	<!-- 잘 사용되지 않지만, 가능한 것 -->
	<servlet-mapping>
		<servlet-name>helloJSP</servlet-name>
		<url-pattern>*.abc</url-pattern>
	</servlet-mapping>
	
	<servlet>
         <servlet-name>elseServlet</servlet-name>
         <servlet-class>chap05.servlet.ElseServlet</servlet-class>
   </servlet>
   
	
	<servlet-mapping>
		<servlet-name>elseServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 
	#초기화 파라미터(Init Parameter)
	- 웹서버에서 초기화 되는 변수들
	- 전역 초기화 파리미터 : context-param, 모든 서블릿에서 사용가능
	- 지역 초기화 파라미터 : init-param, 설정한 해당 서블릿에서만 사용할 수 있다
	
	-->

	<servlet>
		<servlet-name>paramServlet</servlet-name>
		<servlet-class>chap05.servlet.ParamServlet</servlet-class>
		<init-param>
			<param-name>dbid</param-name>
			<param-value>hr</param-value>
		</init-param>
		<init-param>
			<param-name>dbpwd</param-name>
			<param-value>1234</param-value>
		</init-param>
		<init-param>
			<param-name>driverName</param-name>
			<param-value>jbc.driver.OracleDriver</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>paramServlet</servlet-name>
		<url-pattern>/param/*</url-pattern>
	</servlet-mapping>
	
	<!-- 전역 초기화 파라미터는 application 객체에서 꺼내 쓸 수 있다 -->
	<context-param>
		<param-name>version</param-name>
		<param-value>1.13.2</param-value>
	</context-param>
	
	<!-- 에러페이지 설정 -->
	<error-page>
		<error-code>500</error-code>
		<location>/error/500.jsp</location> <!-- 경로는 webapp밑에 있는 경로여야한다 -->
	</error-page>
	
	<!-- 에러페이지 / 예외별 처리 / 예외처리에 따른 매핑이 우선순위인것 같아보인다... -->
	<error-page>
		<exception-type>java.lang.ArithmeticException</exception-type>
		<location>/error/arithmetic.jsp</location>
	</error-page>
	
</web-app>